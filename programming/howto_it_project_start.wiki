[[/index|Main]]

= С чего начинать IT проект =

0. Убедиться в том, что вы до конца понимаете задачу:
    a) зачем нужен проект заказчику;
    b) как проект поможет заказчику;
    c) как заказчик будет использовать проект;
    d) какие задачи у проекта, для чего он нужен.

На этом этапе нужно максимально детализировано понять, что функционально будет
в проекте (какие в нём будут сущности, как они будут друг с другом связаны,
типы пользователей (администраторы, менеджеры, операторы, и
т.д.).

1. Понять какие сущности будут в проекте.
    (Сущность примерно равно таблице в БД.)
    На этом этапе нужно выявить сущности и их взяимосвязи:
    a) описать сущности;
    b) по каждой сущности понять набор данных, которые в этой сущности
       будет. Например:
       * Сущность user:
           - Имя (нужно или не нужно);
           - адрес (нужно или не нужно);
           - email (нужно или не нужно);
           - телефон (нужно или не нужно);
           - как будет проходить авторизация;
           - и т.д.

2. Понять взаимосвязь сущностей.
    Например:
    * Сущность user и сущность group:
        - может ли пользователь сразу быть в нескольких группах;
        - или только в одной.

3. Планирование верхнеуровневой структуры проекта.
    Например, если это Django, то мы пишем набор django applications (набор
    модулей в том языке программирования, в котором будет реализован
    проект).

4. Подумать с чего начать.
    На этом этапе у нас есть общее понимание проекта. Нужно задаться
    вопросом являются ли все 100% функионала жизненно необходимыми, важными
    и без которых совсем никак нельзя.

    Очень важно на старте проекта определить, что составляет его суть и
    реализовать именно её, а потом уже на эту суть нанизывать уже
    дополнительные вещи.

    Можно обсудить этот вопрос с заказчиком, чтобы выявить необходимый
    минимум функционала, с которым он сможет начать пользоваться проектом.

5. Реализация.
    * Разбить работу на конечные, желательно небольшие этапы;
    * Ставить цели на каждые этапы;
    * Ставить дедлайны (очень важная штука);
        - спринт (1-2 недели)
        должно быть понимание функционала, что за этот срок должен быть
        сделан.
    * Тестирование.
        Важно не опускать этап тестирования.

6. Рефакторинг, техдолг.
    Рефакторинг идёт параллельно с реализацией. Если на него времени нет, то
    нужно писать техдолг.
    Техдолг - это перечень узких моментов проекте, которые реализованы
    быстро, но которые хотелось бы реализовать правильно.

7. Сдача проекта.
    Это этап документации. Небольшой документ краткого описания проекта.
    Основные хайлайты, что нам нужно не забыть. 
    Например:
        - какие данные лежат в PostgreSQL;
        - для кэширования используется Reddis;
        - какие данные кэшируем;
        - каким образом обновляется кэш;
        - какие есть cron-задачи;
        - какие есть bash-скрипты;
        - и т.д.
    Это сильно поможет, если через время вернуться к проекту.

