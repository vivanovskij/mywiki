[[index|Main]]

* [[vim_plugins_install|Установка плагинов vim]]
* [[vim_pluggins]]
* [[vim_xkbswitch|Переключение раскладки]]

Файл настройки: ~/.vimrc
Можно редактировать файлы через сеть, например
:e <scp|ftp|ftps>://user@host/path/to/the/file.txt
:Ex или :e ./ - файловый менеджер

        == Основы ==

hjkl                      перемещение в разные стороны
i                         режим вставки
I                         добавление в начало строки
a                         режим добавления
A                         добавление в конец строки
o                         добавить строку сразу за текущей
O                         добавить строку перед текущей
R                         писать поверх имеющегося текста
u, :u[ndo]                отмена предыдущего действия (undo)
CTR-R, :red[o]            отмена отмены предыдущего действия (redo)
dd                        вырезать (удалить) строку
cc                        удалить и начать редактирование
yy                        копировать строку
p                         вставить из буфера обмена
<n>d                      удалить n+1 строку
<n>y                      скопировать n+1 строку
ESC                       перейти в режим просмотра
DEL                       удалить следующий символ
:<n>                      перейти на строку #n
%                         перейти к парной скобке
:e **/filename.c          редактировать файл (с поиском по имени)
:w [fname]                записать изменения
:wa                       сохранить изменения во всех файлах
:q                        выйти из редактора
:q!                       выйти из редактора, не сохраняя изменения
:color <name>             выбор цветовой схемы. цветвые схемы:
                            /usr/local/share/vim/vim72/colors/*.vim
:pwd                      текущий каталог
:cd [path]                перейти в другой каталог
:!команда                 выполнить команду - man, git, и так далее
                            стрелочками веерх и вниз можно автодополнять
                            команды и искать по истории
CTR+p или CTR+n           автоматическое дополнение текста
                            (в режиме редактирования)
CTR+r,=,<expr>            вставить выражение, например 5*2 - 3
                            (в режиме редактирования)
CTR+u, CTR+d              Page Up / Page Down
CTR+y, CTR+e              Перемотка вверх/вниз без движения курсора              
{num}Ctr+a, {num}Ctr+x    Перейти к ближайшей цифре и увеличить/уменьшить
                            на num (если {num} не указано, то на 1)

        == Подсветка синтаксиса ==

:syntax on                включить подсветку
:syntax off               выключить подсветку (по умолчанию)

        == Перенос строк ==

:set wrap                 разрешить word wrap (по умолчанию)
:set nowrap               запретить word wrap

        == Печать ==

:ha[rdcopy]                   распечатать документ
:set printoptions=duplex:off  отключить двустороннюю печать

        == Сворачивание ==

zc                        свернуть блок
zo                        развернуть блок
zM                        закрыть все блоки
zR                        открыть все блоки
za                        инвертирование
zf                        см :set foldmethod=manual
:set foldenable           включить свoрачивание
:set foldmethod=syntax    сворачивание на основе синтаксиса
:set foldmethod=indent    сворачивание на основе отступов
:set foldmethod=manual    выделяем участок с помощью v и говорим zf
:set foldmethod=marker    сворачивание на основе маркеров в тексте
:set foldmarker=begin,end задаем маркеры начала и конца блока

        == Маркеры ==

ma                        установить локальный маркер a
mB                        установить глобальный маркер B
`c                        перейти к локальному маркеру c
`0                        вернуться на позицию, на которой закончили
                            работу при закрытии vim
:marks                    просмотр маркеров
set viminfo='1000,f1      маркеры пишутся в ~/.viminfo, восстанавливаясь
                            при следующем запуске vim. маркер " хранит
                            последнюю позицию курсора в файле
        == Сессии ==

mksession file.session    сохранить текущую сессию
source file.session       восстановить ранее сохраненную сессию

        == Макросы ==

qa                        записать макрос с именем a
q                         в режиме записи макроса: закончить запись
@a                        выполнить макрос с именем a
@@                        повторить последний макрос

        == Регистры ==

"ayy                      скопировать строку в регистр a
"bdd                      вырезать строку и поместить в регистр b
"С2d                      вырезать три строки и дописать в конец
                            регистра C
:reg [name1][name2][...]  просмотреть содержимое регистров

        == Выделение ==

v + hjkl                  выделение текста
SHIFT + v                 выделить строку
CTR + v                   выделение прямоугольника
p                         вставить
y                         копировать
d                         удалить
gu                        к нижнему регистру
gU                        к верхнему регистру

        == Отступы ==

[#]>                      сдвинуть выделенное вправо
[#]<                      сдвинуть выделенное влево
[#]>>                     сдвинуть строку вправо
[#]<<                     сдвинуть строку влево
set tabstop=#             для табуляции используется # пробелов
set shiftwidth=#          в командах отступа используется # пробелов
set [no]expandtab         заменять ли табуляцию на соответствующее
                            число пробелов

        == Поиск и замена в файле ==

*                        поиск слова под курсором
/Выражение               поиск выражения в файле
\cВыражение              поиск без учета регистра
n                        следующее совпадение
N                        предыдущее совпадение
:%s/foo/bar/gi           замена строк, см http://eax.me/regular-expr/

        == Поиск по всему проекту ==

:vimgrep /EXPR/ **/*.c   поиск по регулярному выражению
:copen                   показать все найденные места
:close                   скрыть все найденные места
:cn                      переход к следующему результату
:cp                      переход к предыдущему результату

        == Нумерация строк ==

:set number              включить нумерацию строк
:set nonumber            отключить нумерацию строк

    == Работа с вкладками (a.k.a табами) ==

:tabnew [fname]          создать таб
:tabs                    вывести список табов
:tabn                    следующий таб
:tabp                    предыдущий таб
<n>gt                    перейти на таб #n
gt                       следующий таб
gT                       предыдущий таб
:tabm +1                 переместить таб вперед на одну позицию
:tabm -1                 переместить таб назад на одну позицию
:tabm 2                  переместить таб на заданную позицию
                           (нумерация начинается с нуля)

        == Работа с окнами ==

:split                   горизонтальное разбиение
:sp
:vsplit                  вертикальное разбиение
:vsp
:vs
Ctr+W, затем
  с                      закрыть окно
  +-                     изменение высоты текущего окна
  <>                     изменение ширины текущего окна
  =                      установить равный размер окон
  hjkl или стрелочки     перемещение между окнами

        == Проверка орфографии ==

mkdir -p ~/.vim/spell
cd ~/.vim/spell
wget http://ftp.vim.org/vim/runtime/spell/ru.koi8-r.sug
wget http://ftp.vim.org/vim/runtime/spell/ru.koi8-r.spl
wget http://ftp.vim.org/vim/runtime/spell/en.ascii.sug
wget http://ftp.vim.org/vim/runtime/spell/en.ascii.spl

:set spell spelllang=ru,en       включить проверку орфографии
:set nospell                     выключить проверку орфографии
]s                               следующее слово с ошибкой
[s                               предыдущее слово с ошибкой
z=                               замена слова на альтернативу из списка
zg                               good word
zw                               wrong word
zG                               ignore word

        == Работа с кодировкой ==

e ++enc=<имя кодировки>     Редактирование файла в ???
                            кодировке
w ++enc=<имя кодировки>     Сохранить файл в новой
                            кодировке
set fileencodings=utf-8,    Список автоматически
koi8-r                      определяемых кодировок в
                            порядке убывания приоритета

            == Другое ==

:set [no]wildmenu    При авто-дополнении в
                     командной строке над
                     ней выводятся возможные варианты
:set list            Отображать табуляцию и переводы
                     строк
q:                   История команд
.                    Повторение последней команды


        == Режим выделения ==

<C-g>           переключение между визуальным
                режимом и режимом выделения
<Esc> / <C-[>   переключение в командный режим
v               переключение в посимвольный режим
                выделения
V               переключение в построчный режим 
                выделения
<C-v>           переключение в блочный режим 
                выделения
o               в режиме выделения перемещ.
                курсор в конец выделения
gv              последнее выделение
vit             выделение содержимого тега
$               в блочном режиме расширяет
                область выделения строки


        Режим командной строки
        ----------------------
        
:[range]delete[x]               Удалит указанные строки 
:[range]d[x]                    [в регистр х]

:[range]yank[x]                 Скопирует указанные 
                                строки [в регистр х]
:[line]put[x]                   Вставит текст из  
                                регистра х после 
                                указанной строки
:[range]copy{addr}, :t          Скопирует строки ниже 
                                строки с номером {addr}
:[range]move{addr}, :m          То же переместит
:[range]join                    Объединит строки
:[range]normal{commands}        Выполнит команду         
                                {commands} командного
                                режима для каждой строки
:[range]substitute/{pattern}/   Заменит вхождения
/{string}/[flags]               {pattern}
                                последовательностью
                                символов {string}
                                в каждой строке
:[range]global/{pattern}/[cmd]  Выполнит команду [cmd]
                                для всех строк из числа
                                указанных, где найдено
                                вхождение {pattern}
@:                              повторить послед. команду
:h ex-cmd-index                 справка по командам
:bn[ext]                        обход списка буферов впер.
:bp[revious]                    то же назад
<C-d>,<Tab>|<S-Tab>             автодополнение команд
<C-r><C-w>                      скопировать слово,
                                находящееся под курсором
:<Up>|<Down>                    История команд
q/                              Открыть окно режима 
                                командной строки с 
                                историей поиска
q:                              То же с историей команд
C-f                             Перейти из командной 
                                строки в окно режима 
                                командной строки

@: имеет сходство с выполнением макроса. Нужно отметить, что регистр : всегда хранит самую последнюю команду режима командной строки.


        Диапазон [range]

:{start},{end}  (:10,20print)

В качестве адреса можно использовать:
.   текущая строка
$   последняя строка в файле
0   виртуальная строка в файле, выше первой строки
1   первая строка в файле
'm  строка с меткой m
'<  начало визуального выделения
'>  конец визуального выделения
%   все строки в текущем файле (то же что и :1,$)

В качестве адресов строк можно использовать шаблоны
:/{start}/,/{end}/ напр.: (:/<html>/,/<\/html>/p)
:{address}+n    определяет смещение 
                напр.: (:/<html>/+1,/<\/html>-1/)

:2          перейдет на 2-ю строку
:.,$p       выведет на экран(p) со 2-й до последней стр.


        Запуск программ в командной оболочке
        ------------------------------------

:!{cmd}     запуск внешних команд

:!ls
:!python3 %     знак % - сокращ. форма имени текущ. файла
:h filename-modifiers   справка по модификаторам (типа %)
:shell      запуск интерактивной оболочки

<C-z> приостанавливает процесс, в котором выполняется vim, и передаст управление оболочке bash. Процесс Vim будет простаивать в фоновом режиме, позволяя нам взаимодействовать с командной оболочкой. Получить список заданий можно с помощью $ jobs. Возобновить приостановленное задание в оболочке можно командой fg.


    Передача содержимого буфера на вход командам 
    и сохранение вывода команд в буфере
    -----------------------------------

:read !{cmd}    сохранение вывода команды в текущем буфере
:write !{cmd}   передает содержимое буфера в stdin

Восклицательный знак может придавать командам разный смысл в зависимости от местоположения.
:write !sh  передает содержимое буфера на stdin команде sh
            в командной оболочк будет выполнена каждая 
            строка из текущего буфера
:write ! sh то же 
:write! sh  команда перезаписи файла sh

Фильтрация содержимого буфера с помощью внешней команды
-------------------------------------------------------

Команда :!{cmd} приобретает иной смысл, когда ей передается диапазон строк. Строки, определяемые диапазном [range], передаются на стандартный ввод команды {cmd}, а ее вывод затирает оригинальное содержимое диапазона.
:h :range!
:[range]!{filter}
:{motion}   переведёт редактор в режим командной строки и подставит в поле [range] диапазон, соответствующий указанному аргументу {motion}. Например, если поместить курсор в стр.2 и выполнить !G, Vim откроет командную строку и подставит в неё диапазон :.,$!

:shell          Запускает командную оболочку (возврат в 
                Vim выполняется командой exit)
:!{cmd}         Выполняет команду {cmd} в командной 
                оболочке
:read !{cmd}    Выполняет команду {cmd} в командной 
                оболочке и ставляет вывод ниже курсора
:[range]write !{cmd} Выполняет команду {cmd} в командной 
                        оболочке и передает на её 
                        стандартный ввод указанный 
                        диапазон строк [range]
:[range]!{filter}   Фильтрует указанный диапазон строк 
                    [range] с помощью внешней команды 
                    {filter}

Некоторые команды интерпретируются редактором Vim особо. Например, для команд make и grep имеются отдельные команды-обёртки.


    Выполнение сразу нескольких команд Ex
    -------------------------------------

:source {script}    запустить сценарий
:source batch.vim

:argdo source {scripts} запустить сценарий сразу для 
                        нескольких файлов (открытых в 
                        буферах)

    Управление несколькими файлами
    ------------------------------

:ls     Список буферов % - текущий файл # - альтернативный
:bnext  следующий буфер
:bprev  предыдущий буфер
:bfirst в начало списка
:blast  в конец списка
:buffer N   перейти к буферу непосредственно
:buffer {bufname}   в имени {bufname} можно указать лишь 
                    первые символы имени идентифицирующие 
                    буфер
:bufdo  применить команду Ex ко всем буферам, 
        пречисляемым командой ls
<C-^>   переключиться на следующий файл
:bd[elete]              удаление буфера
:bd[elete] N1 N2 ...    удаление нескольких буферов
:N,M bd[elete]          удаление от N до M буферов


    Назначение горячих клавиш для обхода списков в Vim:
    ---------------------------------------------------
Из расширения unimpaired.vim (https://github.com/tpope/vim-unimpaired)
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>

    Группировка буферов с помощью списка агрументов
    -----------------------------------------------

:args       список файлов, перечисленных при выполнении 
            команды vim (при открытии :h args_f)
:args {argslist}    аргумент {arglist} может включать 
                    имена файлов, групповые симовлы и 
                    даже вывод команды оболочки
Пример:
:args index.html app.js

Для определения шаблонов имён файлов и каталогов можно использовать групповые симовлы. 
Символ * соответствует нулю или более символам, но только в пределах указанного каталога (:h wildcard). 
Символ ** также соответствует нулю или более символам, но он позволяет углубляться во вложенные подкаталоги (:h starstar-wildcard)
Допускается объединять эти групповые символы с фрагментами имён файлов и каталогов для составления шаблонов, соответствующих множеству файлов, представляющих интерес:
:args *.*
:args **/*.*
:args **/*.js
Так же как в {arglist} можно указать несколько имён файлов, можно указать и несколько шаблонов:
:args **/*.js **/*.css

    Определение файлов с помощью обратных кавычек
    ---------------------------------------------
Можно создать текстовый файл (напр. .chapters) с именами файлов под одному в каждой строке:

the_vim_way.txt
normal_mode.txt
insert_mode.txt
visual_mode.txt

Заполнить список агрументов из этого файла можно следующей командой:

:args `cat .chapters`

Текст, находящийся в обратных кавычках, Vim выполнить в командной оболочке, а вывод передаст как аргумент команде :args

Список аргументов более прост в управлении, чем список буферов, что делает его идеальным средством группировки буферов в коллекции. Единственной командой :args {arglist} можно очистить и тут же заполнить список аргументов новыми элементами. Команды :next, :prev обеспечивают возможность навигации. Команда :argdo позволяет применить одну и ту же команду к каждому буферу в коллекции.


    Управление скрытыми файлами
    ---------------------------

:e[dit]!    эта команда прочитает файл с диска и затрёт 
            содержимое буфера
:qa[ll]!    закрыть Vim невзирая на наличие изменений в 
            буферах
:wa[ll]     сохранить все буферы сразу

        Команда :argdo
        --------------

Команда :argdo {cmd} действует примерно след. образом:
:first
:{cmd}
:next
:{cmd}
и т.д.

    Если выбранная команда {cmd} изменит содержимое первого буфера, следующая за ней команда :next потерпит неудачу. Vim не позволит перейти ко второму пункту в списке аргументов, пока не будут сохранены изменения в первом. Чтобы использовать команды :next, :bnext, :cnext (и др.) без завершающего восклицательного знака нужно включить параметр hidden (:h 'hidden'). Параметр настройки hidden позволяет использовать команды :argdo и :bufdo для изменения буферов в коллекции единственной командой.
    После выполнения команды :argdo {cmd} может потребоваться сохранить изменения, внесенные в каждый элемент списка аргументов. Мы могли бы сохранить буферы по одному, выполнив :first и затем :wn, получив попутную возможность просмотреть каждый файл. Или, если нет никаких сомнений, что всё в порядке, можно выполнить команду :argdo write (или :wall), чтобы сохранить сразу все буферы.


    Деление рабочего пространства на окна
    -------------------------------------

<C-w>s          разделить окно по горизонтали
<C-w>v          разделить окно по вертикали
:sp[lit] {file} разделит окно по горизонтали и загрузит 
                файл {file}
:vsp[lit] {file}разделит окно по вертикали и загрузит 
                файл {file}

    Переключение фокуса ввода между окнами
    --------------------------------------

<C-w>w      Передает фокус ввода между окнами в цикле
<C-w>h      Передает фокус ввода окну слева
<C-w>j      Передает фокус ввода окну ниже
<C-w>k      Передает фокус ввода окну выше
<C-w>l      Передает фокус ввода окну справа

        Закрытые окон
        -------------

:clo[se]    <C-w>c  закроет активное окно
:on[ly]     <C-w>o  закроет все окна, кроме активного

    Изменение размеров и переупорядочение окон
    ------------------------------------------

<C-w>=      выровняет ширину и высоту всех окон
<C-w>|      увеличит ширину активного окна до предела
<C-w>_      увеличит высоту активного окна до предела
[N]<C-w>|   установит ширину активного окна [N] строк
[N]<C-w>_   установит высоту активного окна [N] строк 
Размер окон можно менять мышкой


    Организация размещения окон с помощью вкладок
    ---------------------------------------------

:lcd {path}         установить текущий рабочий кат. для 
                    текущего окна (окна, а не вкладки)
:windo lcd {path}   то же для всех окон во вкладке
:tabnew             откроет новую пустую вкладку
:tabe[dit] {fname}  откроет {fname} в новой вкладке
:tabc[lose]         закроет текущую вкладку и все окна 
                    в ней
:tabo[nly]          закроет все вкладки, кроме текущей
<C-w>T              переместит текущее окно в новую 
                    вкладку

:tabn[ext]  {N}gt   переключиться на вкладку {N}
:tabn[ext]  gt      переключиться на след. вкладку
:tabp[revious]  gT  переключиться на пред. вкладку

:tabmove [N]    переупорядочить вкладки. Если в аргументе 
                [N] передаётся 0, текущая вкладка 
                переносится в начало, если опустить 
                аргумент [N], текущая вкладка 
                переместится в конец. Можно 
                переупорядочить с помощью мыши.


        Файлы
        -----

:edit {file}    Открыть файл
:edit %<Tab>    % подставит путь к файлу в активном буфере
:edit %:h<Tab>  модификатор :h удалит имя файла, оставив 
                путь к нему

Прописать в .vimrc: 
cnoremap <expr> %% getcmdtype() == ":" ? expand('%:h').'/' : '%%'
и последовательность %% в командной строке Vim будет замещаться путем к каталогу, где хранится активный файл, как если бы ввели %:h<Tab>

:find {file}<Tab>   открытие файла по его имени без 
                    неоходимости указывать пути к нему
                    (присвоив параметру wildmode другое
                    значение, отличное от значения по 
                    умолчанию full, можно наблюдать
                    иное поведение автодополнения)

:set path+={path}   добавить каталог для поиска find
:set path+=app/**   ** соотв. всем подкаталогам,   
                    вложенным в каталог app/


        netrw - встроенный обозреватель файлов
        --------------------------------------

Расширение netrw распространяется в составе стандартного дистрибутива Vim. Чтобы настроить нужно добавить в файл .vimrc:
set nocompatible
filetype plugin on

Если запустить Vim, передав ему путь к каталогу, а не к файлу, он откроет окно обозревателя файлов.

-           перейти в родительский каталог

Осуществлять навигацию по содержимому каталога можно не только с помощью клавиш j и k. Поддерживаются также все команды перемещения курсора, доступные в обычных буферах Vim. Например, можно выполнить поиск /{file}.

Открыть окно обозревателя файлов можно командой :edit {path}, передав в аргументе {path} имя каталога (вместо файла). Символ точки (.) соответствует текущему рабочему каталогу.

Если потребуется открыть в обозревателе каталог, где находится текущий файл, это можно сделать с помощью команды :edit %:h (:edit %%).

:edit .     :e .    откроет текущий каталог
:Explore    :E      откроет каталог текущего файла
:Sexplore   :Se     то же, в новом окне разбив по гориз.
:Vexplore   :Ve     то же, разбив по вертикали
