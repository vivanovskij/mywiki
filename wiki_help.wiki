[[index|Main]]

= Contents =
        - [[#Folding/Outline|Folding/Outline]]
        - [[#Placeholders|Placeholders]]
        - [[#Lists|Lists]]
        - [[#Tables|Tables]]
        - [[#Diary|Diary]]
        - [[#Anchors|Anchors]]
        - [[#Hotkeys|Hotkeys]]
            - [[#Hotkeys#Edit pages|Edit pages]]
            - [[#Hotkeys#Списки|Списки]]

== Folding/Outline ==
6. Folding/Outline                                           *vimwiki-folding*

Vimwiki allows you to use Vim's folding methods and options so you can fold
your outline to make it less distracting and easier to navigate. You can use
Vimwiki's built-in folding methods or supply custom methods for folding.  You
control how folds behave with by setting the |g:vimwiki_folding| variable to
the desired value in your configuration file: >

  let g:vimwiki_folding = 'value'

Here's an example of how folds work with |g:vimwiki_folding| set to 'list':

"= My current task =
"* [ ] Do stuff 1
"  * [ ] Do substuff 1.1
"  * [ ] Do substuff 1.2
"    * [ ] Do substuff 1.2.1
"    * [ ] Do substuff 1.2.2
"  * [ ] Do substuff 1.3
"* [ ] Do stuff 2
"* [ ] Do stuff 3

Hit |zM| :
"= My current task =
"* [ ] Do stuff 1 [6] --------------------------------------~
"* [ ] Do stuff 2
"* [ ] Do stuff 3

Hit |zr| :
"= My current task =
"* [ ] Do stuff 1
"  * [ ] Do substuff 1.1
"  * [ ] Do substuff 1.2 [3] -------------------------------~
"  * [ ] Do substuff 1.3
"* [ ] Do stuff 2
"* [ ] Do stuff 3

Hit |zr| one more time :
"= My current task =
"* [ ] Do stuff 1
"  * [ ] Do substuff 1.1
"  * [ ] Do substuff 1.2
"    * [ ] Do substuff 1.2.1
"    * [ ] Do substuff 1.2.2
"  * [ ] Do substuff 1.3
"* [ ] Do stuff 2
"* [ ] Do stuff 3

Note: If you use the default Vimwiki syntax, folding on list items will work
properly only if all of them are indented using the current 'shiftwidth'.
For Markdown and MediaWiki syntax, * or # should be in the first column.

For maximum control over folds, set |g:vimwiki_folding| to 'custom' so you can
allow other plugins or your vim configuration file to control how folding is
performed. For example, let's say you are using markdown syntax and prefer to
fold so that the last blank line before a header is not folded, you can add
this function to your configuration file: >

  function! VimwikiFoldLevelCustom(lnum)
    let pounds = strlen(matchstr(getline(a:lnum), '^#\+'))
    if (pounds)
      return '>' . pounds  " start a fold level
    endif
    if getline(a:lnum) =~? '\v^\s*$'
      if (strlen(matchstr(getline(a:lnum + 1), '^#\+')))
        return '-1' " don't fold last blank line before header
      endif
    endif
    return '=' " return previous fold level
  endfunction

Note that you will also need to add the following vim options to your configuration: >

  augroup VimrcAuGroup
    autocmd!
    autocmd FileType vimwiki setlocal foldmethod=expr |
      \ setlocal foldenable | set foldexpr=VimwikiFoldLevelCustom(v:lnum)
  augroup END

See the |g:vimwiki_folding| documentation for more details.

==============================================================================
== Placeholders ==
7. Placeholders                                         *vimwiki-placeholders*

------------------------------------------------------------------------------
%title Title of the page                                       *vimwiki-title*

When you htmlize your wiki page, the default title is the filename of the
page. Place >

%title My books

into your wiki page if you want another title.


------------------------------------------------------------------------------
%nohtml                                                       *vimwiki-nohtml*

If you do not want a wiki page to be converted to HTML, place:

%nohtml

into it.


------------------------------------------------------------------------------
%template                                                   *vimwiki-template*

To apply a concrete HTML template to a wiki page, place:

%template name

into it.

See |vimwiki-option-template_path| for details.

------------------------------------------------------------------------------
%date                                                           *vimwiki-date*

The date of the wiki page. The value can be used in the HTML template, see
|vimwiki-option-template_path| for details.

%date 2017-07-08
%date

If you omit the date after the placeholder, the date of the HTML conversion is
used.


==============================================================================
== Lists ==
8. Lists                                                       *vimwiki-lists*

While writing lists, the keys <CR>, o and O insert new bullets or numbers as
you would expect it. A new bullet/number is inserted if and only if the cursor
is in a list item. If you use hard line wraps within your lists then you will
need to remap `<CR>` to `VimwikiReturn 3 5`, use <S-CR>, or press <CR> and
<C-L><C-M>.

Note that the mapping <S-CR> is not available in all terminals.

Furthermore, <CR> and <S-CR> behave differently when the cursor is behind an
empty list item. See the table below.

To customize the behavior you should use an autocmd or place the mappings in
`~/.vim/after/ftplugin/vimwiki.vim`. This is necessary to avoid an error that
the command `VimwikiReturn` doesn't exist when editing non Vimwiki files.: >

  autocmd FileType vimwiki inoremap <silent><buffer> <CR>
              \ <C-]><Esc>:VimwikiReturn 3 5<CR>
  autocmd FileType vimwiki inoremap <silent><buffer> <S-CR>
              \ <Esc>:VimwikiReturn 2 2<CR>

Note: Prefixing the mapping with `<C-]>` expands iabbrev definitions and
requires Vim > 7.3.489.

The first argument of the command :VimwikiReturn is a number that specifies
when to insert a new bullet/number and when not, depending on whether the
cursor is in a list item or in a normal line: >

 Number │     Before     │    After
 ======================================
    1   │ 1. item|       │ 1. item
        │                │ 2. |
        │––––––––––––––––––––––––––––––       ← default for <CR>
        │ 1. item        │ 1. item
        │    continue|   │    continue
        │                │    |
 ======================================
    2   │ 1. item|       │ 1. item
        │                │    |
        │––––––––––––––––––––––––––––––       ← default for <S-CR>
        │ 1. item        │ 1. item
        │    continue|   │    continue
        │                │ 2. |
 ======================================
    3   │ 1. item|       │ 1. item
        │                │ 2. |
        │––––––––––––––––––––––––––––––
        │ 1. item        │ 1. item
        │    continue|   │    continue
        │                │ 2. |
 ======================================
    4   │ 1. item|       │ 1. item
        │                │    |
        │––––––––––––––––––––––––––––––
        │ 1. item        │ 1. item
        │    continue|   │    continue
        │                │    |
<

The second argument is a number that specifies what should happen when you
press <CR> or <S-CR> behind an empty list item. There are no less than five
possibilities:
>
 Number │     Before     │    After
 ======================================
    1   │ 1. |           │ 1.
        │                │ 2. |
 ======================================
    2   │ 1. |           │                    ← default for <S-CR>
        │                │ 1. |
 ======================================
    3   │ 1. |           │ |
        │                │
 ======================================
    4   │ 1. |           │
        │                │ |
 ======================================
    5   │     1. |       │ 1. |
        │                │
        │––––––––––––––––––––––––––––––       ← default for <CR>
        │ 1. |           │ |
        │                │
<


                                                   *vimwiki-list-manipulation*
The level of a list item is determined by its indentation (default and
Markdown syntax) or by the number of list symbols (MediaWiki syntax).

Use gll and glh in normal mode to increase or decrease the level of a list
item. The symbols are adjusted automatically to the list items around it.
Use gLl and gLh to increase or decrease the level of a list item plus all
list items of lower level below it, that is, all child items.

Use <C-T> and <C-D> to change the level of a list item in insert mode.

See |vimwiki_gll|, |vimwiki_gLl|, |vimwiki_glh|, |vimwiki_gLh|,
|vimwiki_i_<C-T>|, |vimwiki_i_<C-D>|


Use gl followed by the desired symbol to change the symbol of a list item or
create one. Type gL and the symbol to change all items of the current list.
For default syntax, the following types are available: >
"    - hyphen
"    * asterisk
"    # hash
"    1. number with period
"    1) number with parenthesis
"    a) lower-case letter with parenthesis
"    A) upper-case letter with parenthesis
"    i) lower-case Roman numerals with parenthesis
"    I) upper-case Roman numerals with parenthesis

Markdown syntax has the following types: >
    - hyphen
    * asterisk
    + plus
    1. number with period

MediaWiki syntax only has: >
    * asterisk
    # hash

In insert mode, use the keys <C-L><C-J> and <C-L><C-K> to switch between
symbols. For convenience, only the commonly used symbols can be reached
through these keys for default syntax.

Note that such a list: a) b) c) … only goes up to zz), to avoid confusion with
normal text followed by a parenthesis.
Roman numerals go up to MMMM) and numbers up to 2147483647. or
9223372036854775807. depending if your Vim is 32 or 64 bit.

Also, note that you can, of course, mix different list symbols in one list, but
if you have the strange idea of putting a list with Roman numerals right after
a list using letters or vice versa, Vimwiki will get confused because it
cannot distinguish which is which (at least if the types are both upper case
or both lower case).

See |vimwiki_glstar|, |vimwiki_gl#| |vimwiki_gl-|, |vimwiki_gl-|,
|vimwiki_gl1|, |vimwiki_gla|, |vimwiki_glA|, |vimwiki_gli|, |vimwiki_glI|


Use glr and gLr if the numbers of a numbered list are mixed up. See
|vimwiki_glr| and |vimwiki_gLr|.


------------------------------------------------------------------------------
Todo lists                                                *vimwiki-todo-lists*

You can have todo lists -- lists of items you can check/uncheck.

Consider the following example: >
"= Toggleable list of todo items =
"   * [X] Toggle list item on/off.
"     * [X] Simple toggling between [ ] and [X].
"     * [X] All list's subitems should be toggled on/off appropriately.
"     * [X] Toggle child subitems only if current line is list item
"     * [X] Parent list item should be toggled depending on its child items.
"   * [X] Make numbered list items toggleable too
"   * [X] Add highlighting to list item boxes
"   * [X] Add [ ] to the next list item created with o, O and <CR>.

Pressing <C-Space> on the first list item will toggle it and all of its child
items: >
" = Toggleable list of todo items =
"   * [ ] Toggle list item on/off.
"     * [ ] Simple toggling between [ ] and [X].
"     * [ ] All of a list's subitems should be toggled on/off appropriately.
"     * [ ] Toggle child subitems only if the current line is a list item.
"     * [ ] Parent list item should be toggled depending on their child items.
"   * [X] Make numbered list items toggleable too.
"   * [X] Add highlighting to list item boxes.
"   * [X] Add [ ] to the next list item created using o, O or <CR>.

Pressing <C-Space> on the third list item will toggle it and adjust all of its
parent items: >
" = Toggleable list of todo items =
"   * [.] Toggle list item on/off.
"     * [ ] Simple toggling between [ ] and [X].
"     * [X] All of a list's subitems should be toggled on/off appropriately.
"     * [ ] Toggle child subitems only if current line is list item.
"     * [ ] Parent list item should be toggled depending on its child items.
"   * [ ] Make numbered list items toggleable too.
"   * [ ] Add highlighting to list item boxes.
"   * [ ] Add [ ] to the next list item created using o, O or <CR>.

:task-progres:
Parent items should change when their child items change. If not, use
|vimwiki_glr|. The symbol between [ ] depends on the percentage of toggled
child items (see also |g:vimwiki_listsyms|): >
    [ ] -- 0%
    [.] -- 1-33%
    [o] -- 34-66%
    [O] -- 67-99%
    [X] -- 100%

You can use |vimwiki_gln| and |vimwiki_glp| to change the "done" status of a
checkbox without a childitem.

It is possible to toggle several list items using visual mode. But note that
instead of toggling every item individually, all items get checked if the
first item was unchecked and all items get unchecked if the first item was
checked.

Use gl<Space> (see |vimwiki_gl<Space>|) to remove a single checkbox and
gL<Space> (see |vimwiki_gL<Space>|) to remove all checkboxes of the list the
cursor is in.

You can mark an item as rejected ("won't do") with
|vimwiki_glx|. A rejected item will not influence the status of its parents.


==============================================================================
== Tables ==
9. Tables                                                     *vimwiki-tables*

Use the  :VimwikiTable command to create a default table with 5 columns and 2
rows: >

 |   |   |   |   |   |
 |---|---|---|---|---|
 |   |   |   |   |   |
<

Tables are auto-formattable. Let's add some text into first cell: >

 | First Name  |   |   |   |   |
 |---|---|---|---|---|
 |   |   |   |   |   |
<

Whenever you press <TAB>, <CR> or leave Insert mode, the table is formatted: >

 | First Name |   |   |   |   |
 |------------|---|---|---|---|
 |            |   |   |   |   |
<

You can easily create nice-looking text tables, just press <TAB> and enter new
values: >

 | First Name | Last Name  | Age | City     | e-mail               |
 |------------|------------|-----|----------|----------------------|
 | Vladislav  | Pokrishkin | 31  | Moscow   | vlad_pok@smail.com   |
 | James      | Esfandiary | 27  | Istanbul | esfandiary@tmail.com |
<

To indent table indent the first row. Then format it with 'gqq'.

You can specify the type of horizontal alignment for columns in the separator
using the ':' character. The default is left-align.  >

 | Date       |  Item  |   Price |
 |------------|:------:|--------:|
 | yest       | Coffee |  $15.00 |
 | 2017-02-13 |  Tea   |   $2.10 |
 | 2017-03-14 |  Cake  | $143.12 |
<

==============================================================================
== Diary ==
10. Diary                                                      *vimwiki-diary*

The diary helps you make daily notes. You can easily add information into
Vimwiki that should be sorted out later. Just hit <Leader>w<Leader>w to create
a new note for today with a name based on the current date.

To generate the diary section with all available links one can use
|:VimwikiDiaryGenerateLinks| or <Leader>w<Leader>i .

Note: it works only for diary index file.

Example of diary section: >
"    = Diary =
"
"    == 2011 ==
"
"    === December ===
"        * [[2011-12-09]]
"        * [[2011-12-08]]


See |g:vimwiki_diary_months| if you would like to rename months.


------------------------------------------------------------------------------
Calendar integration                                        *vimwiki-calendar*

If you have Calendar.vim installed you can use it to create diary notes.
Just open calendar with :Calendar and tap <Enter> on the date. A wiki file
will be created in the default wiki's diary.

Get it from http://www.vim.org/scripts/script.php?script_id=52

See |g:vimwiki_use_calendar| option to turn it off/on.


------------------------------------------------------------------------------
Markdown export

If you use markdown as the syntax for your wiki, there is a rubygem available
at https://github.com/patrickdavey/vimwiki_markdown which you can use to
convert the wiki markdown files into html.

Also, See |vimwiki-option-html_filename_parameterization| for supporting
functionality.

==============================================================================
== Anchors ==
11. Anchors                                                  *vimwiki-anchors*

Every header, tag, and bold text can be used as an anchor.  To jump to it, use
a wikilink of the form >
  [[file#anchor]]

For example, consider the following file "Todo.wiki": >
"  = My tasks =
"  :todo-lists:
"  == Home ==
"    - [ ] bathe my dog
"  == Work ==
"    - [ ] beg for *pay rise*
"  == Knitting club ==
"  === Knitting projects ===
"    - [ ] a *funny pig*
"    - [ ] a *scary dog*

Then, to jump from your index.wiki directly to your knitting projects, use: >
  [[Todo#Knitting projects]]

Or, to jump to an individual project, use this link: >
  [[Todo#funny pig]]

Or, to jump to a tag, use this link: >
  [[Todo#todo-lists]]

If there are multiple instances of an anchor, you can use the long form which
consists of the complete header hierarchy, separated by '#': >
 [[Todo#My tasks#Knitting club#Knitting projects#scary dog]]

If you don't feel like typing the whole stuff, type just [[Todo# and then
|i_CTRL-X_CTRL-O| to start the omni completion of anchors.

For jumping inside a single file, you can omit the file in the link: >
  [[#pay rise]]


------------------------------------------------------------------------------
Table of Contents                    *vimwiki-toc* *vimwiki-table-of-contents*
:table-of-contents:
You can create a "table of contents" at the top of your wiki file.
The commando |:VimwikiTOC| creates the magic header > = Contents =
in the current file and below it a list of all the headers in this file as
links, so you can directly jump to specific parts of the file.

For the indentation of the list, the value of |vimwiki-option-list_margin| is
used.

If you don't want the TOC to sit in the very first line, e.g. because you have
a modeline there, put the magic header in the second or third line and run
:VimwikiTOC to update the TOC.

If English is not your preferred language, set the option
|g:vimwiki_toc_header| to your favorite translation.

If you want to keep the TOC up to date automatically, use the option
|vimwiki-option-auto_toc|.


------------------------------------------------------------------------------
Tagbar integration                                            *vimwiki-tagbar*

As an alternative to the Table of Contents, you can use the Tagbar plugin
(http://majutsushi.github.io/tagbar/) to show the headers of your wiki files
in a side pane.
Download the Python script from
https://raw.githubusercontent.com/vimwiki/utils/master/vwtags.py and follow
[[the]] instructions in it.

Полный список справки :h vimwiki


== Hotkeys ==

=== Edit pages ===

<Leader>wd         n    Delete wiki page you are in.
                        Maps to |:VimwikiDeleteFile|.
                        Remap command: `<Plug>VimwikiDeleteFile`

                                                          *vimwiki_<Leader>wr*
<Leader>wr         n    Rename wiki page you are in.
                        Maps to |:VimwikiRenameFile|.
                        Remap command: `<Plug>VimwikiRenameFile`
                        
                        
<Backspace>        n    Go back to previously visited wiki page.
                        Maps to |:VimwikiGoBackLink|.
                        Remap command: `<Plug>VimwikiGoBackLink`
                        
                        
=== Списки ===

В режиме вставки:

                                                             *vimwiki_i_<C-T>*
<C-T>                   Increase the level of a list item.
                        Remap command: `<Plug>VimwikiIncreaseLvlSingleItem`

                                                             *vimwiki_i_<C-D>*
<C-D>                   Decrease the level of a list item.
                        Remap command: `<Plug>VimwikiDecreaseLvlSingleItem`

                                                       *vimwiki_i_<C-L>_<C-J>*
<C-L><C-J>              Change the symbol of the current list item to the next
                        available. From - to 1. to * to I) to a).
                        Remap command: `<Plug>VimwikiListNextSymbol`

                                                       *vimwiki_i_<C-L>_<C-K>*
<C-L><C-K>              Change the symbol of the current list item to the prev
                        available. From - to a) to I) to * to 1.
                        Remap command: `<Plug>VimwikiListPrevSymbol`

                                                       *vimwiki_i_<C-L>_<C-M>*
<C-L><C-M>              Create/remove a symbol from a list item.
                        Remap command: `<Plug>VimwikiListToggle`

