[[../../index|Main]]
[[../bash|Back]]


        Команда echo
        ------------

echo выводит свои текстовые аргументы в stdout
echo this is a test
echo *
echo ~
echo $((2 + 2))

echo $((выражение))
Механизм подстановки арифметических выражений позволяет использовать только целые числа (невещественные), зато поддерживает множество арифметических операций.

Операторы:

+   Сложение
-   Вычитание
*   Умножение
/   Деление (результат будет целое число из-за того, что
    подстановка поддерживает только целочисленную арифм.)
%   Деление по модулю или остаток от деления
**  Возведение в степень  

echo $(($((5**2)) * 3))

Для группировки подвыражений допускается использование одиночных круглых скобок.

echo $(((5**2) * 3))

    Подстановка фигурных скобок
    ---------------------------

$ echo Впереди-{A,B,C}-позади
Впереди-А-позади Впереди-В-позади Впереди-С-позади

$ echo Число {1..5}

$ echo {Z..A}

$ echo a{A{1,2},B{3,4}}b



    Подстановка параметров
    ----------------------

echo $USER

Чтобы увидеть список доступных переменных:
printenv | less


    Подстановка команд
    ------------------

Подстановка команд позволяет использовать поток вывода команд в качестве аргументов других команд:
echo $(ls)

ls -l $(which cp)   Здесь результат команды which cp передается как аргумент команде ls, благодаря чему мы получаем информацию о программе cp, не зная полного пути к ней.

Можно использовать конвееры:
file $(ls /usr/bin/* | grep zip)

Альтернативный синтаксис, унаследованный от более старых командных оболочек. Вместо знака доллара и круглых скобок используются обратные апострофы:

ls -l `which cp`


    Экранирование
    -------------

1. Двойные кавычки
Если заключить текст в двойные кавычки, все спецсимволы потеряют своё значение и будут интерпретироваться как обычные симовлы. Исключение сост.: $, \ и `. То есть разбиение на слова, подстановка путей, подстановка тильды и подстановка фигурных скобок выполняться не будут, но подстановка параметров, подстановка значений арифметических выражений и подстановка команд всё ещё будут выполняться.

2. Одиночные кавычки
Подавляют все подстановки

3. Экранирование символов
Обратный слеш \ используется для экранирования одного симовла.
Чтобы включить сам экранирующий символ, его также нужно экранировать \\.

    Управляющие последовательности

\a      Подать звуковой сигнал
\b      Забой (bakspace)
\n      Новая строка
\r      Возврат каретки
\t      Табуляция

Параметр -e команды echo включает интерпретацию управляющих последовательностей. Их можно также заключать в конструкцию $' '.

Пример использования команды sleep:
    sleep 10; echo -e "Time's up\a"

То же самое можно выразить так:
    sleep 10; echo "Time's up" $'\a'
