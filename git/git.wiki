[[/index|Main]]


= Git =
Настройка данных пользователя
(Параметр --global устанавливает данные для всей системы, без него настраивается
текущий проект)
git config --global user.name {name}
git config --global user.email {email}

Инициализация проекта
---------------------
git init

Добавление файлов
-----------------
git add .
git add *.py
git add file
git add folder/
git add !folder/file (Добавить папку кроме файла)

Удаление файлов
---------------
удалить из файловой системы
git rm {file}
удалить из репозитория, но оставить в файловой системе
git rm --cached {file}
(изменения будут после коммита)


Проверка состояния
------------------
git status

Закрепление
-----------
git commit -m "{Comment}"

Посмотреть журнал изменений проекта
-----------------------------------
git log (Развёрнутый)
git log --oneline (Сокращённый)

Посмотреть предыдущее состояние проекта
---------------------------------------
git checkout {commit_id} (commit_id - индетификатор коммита)

Отменить определённый commit
----------------------------
git revert {commit_id}

Удалить все изменения после определённого коммита
-------------------------------------------------
git reset {commit_id} (проект не возвращается к исходному состоянию)
git reset {commit_id} --hard (проект возвращается к исходному сост.)

Создание веток
--------------
git branch {name} (создать ветку)
git checkout -b {name} (создать ветку и перейти на неё)
git checkout {name} (перейти на ветку)
git branch -a (вывести список веток)

Слияние веток
-------------
git checkout master (сначала перейти на ветку master)
git merge {name} (затем объединяем с нужной веткой)



== Github == 
Подключение к репозиторию
-------------------------
git remote add <name> <url> (<name> это имя ветки, напр. origin <url> это ссылка на репозиторий)

Просмотр к какому репозиторию подключены
----------------------------------------
git remote

Отправить проект на удалённый репозиторий
-----------------------------------------
git push -u origin master

Клонировать репозиторий
-----------------------
git clone {url} ({url} это адрес репозитория)

Скачать изменения в репозитории
-------------------------------
git pull

Файл README.md 
---------------
md значит markdown (разметка). Справка https://www.markdownguide.org/basic-syntax/

Подключение по SSH
------------------

Папка
~/.ssh

Сгенерировать ключи
-------------------
ssh-keygen

~/.ssh/id_rsa (Приватные ключи)
~/.ssh/id_rsa.pub (Публичные ключи)

Скопировать id_rsa.pub

В профиле github.com Settings > SSH and GPG keys > New SSH key
В поле title название ключа (напр. Linux SSH key)
В поле key вставить скопированный ранее ключ

При клонировании проектов нужно использовать ssh ссылку

Посмотреть ссылку подключения
-----------------------------
git remote -v

Если в проекте уже установлена обычная https ссылка, то
-------------------------------------------------------
изменить на ssh
git remote set-url origin {ssh_link}


== Gitignore ==
О файле .gitignore
.gitignore нужен для скрытия файлов и папок от системы контроля версий Git. Обычно скрывают конфигурационные файлы (особенно с паролями), временные файли и папки. gitignore использует glob формат для выборки файлов.

Основной синтаксис:

Каждая строка - отдельный шаблон
Пустые строки игнорируются
Строки начинающиеся с # являются комментариями
Символ слеша "/" в начале строки указывает на текущую папку (где лежит .gitignore)
Звёздочка(*) заменяет любое количество символов
Две звёздочки(**) используются для указания всех подпапок.
Восклицательный знак(!) в начале строки инвертирует шаблон (используется для исключений)
Для экранирования спецсимволов используется обратный слэш "\". Для игнорирования всей директории, правило должно оканчиваться на слэш(/), в противном случае правило считается именем файла.
В репозитарии gitignore от github собраны примеры gitignore файлов для всех типовых проектов.

Пример .gitignore файла
# Игнорировать файл foo.txt.
foo.txt
# Игнорировать html файлы
*.html
# Но конкретно foo.html не игнорировать
!foo.html
# Игнорировать rar файлы в корне проекта
# Допустим файл /temp/main.rar не будет проигнорирован т.к. он не в корне
/*.rar
# Игнорировать css файлы из папки bar не включая подпапки
# Допустим файл /bar/temp/main.css не будет проигнорирован т.к. он в подпапке temp
/bar/*.css
# Игнорировать js файлы из папки bar и подпапок, если таковые будут
/bar/**.*.js
Как исключит папку из отслеживания, но добавить подпапку?
Задача 1
Убрать папку node_modules, но оставить в ней 2 подпапки jquery и semantic

├── js
│   ├── app.js
│   └── system.js
├── scss
│   ├── system.scss
│   └── theme.scss
└── vendor
    ├── node_modules       <-- Убрать
    │   ├── load-json-file
    │   ├── lodash
    │   ├── jquery         <-- Оставить
    │   ├── make-error
    │   ├── semantic       <-- Оставить
    │   └── yargs
    └── semantic.json
Решение:

/vendor/node_modules/*
!/vendor/node_modules/jquery/
!/vendor/node_modules/semantic/
Задача 2
Убрать папку node_modules, но оставить в её подпапке jquery подпапку dist

├── js
│   ├── app.js
│   └── system.js
├── scss
│   ├── system.scss
│   └── theme.scss
└── vendor
    ├── node_modules       <-- Убрать
    │   ├── load-json-file
    │   ├── lodash
    │   ├── jquery
    │   │   └──dist        <-- Оставить
    │   ├── make-error
    │   ├── semantic
    │   └── yargs
    └── semantic.json
Решение:

/vendor/node_modules/*
/vendor/node_modules/jquery/*
!/vendor/node_modules/jquery/
!/vendor/node_modules/jquery/dist/
Как игнорировать файлы, которые уже отслеживаются?
Если вы добавили файл или папку в .gitignore, после того как они попали в репозиторий, то их необходимо удалить из репозитория командой:

git rm --cached <file>
Например убрать папку storage/framework/cache/. Обратите внимание: вначале отсутствует слеш.

git rm -r --cached "storage/framework/cache/"

----------------------------------------------------------------------

Я не знаю ни одного проекта, в рабочей директории которого не появлялось бы таких файлов, которые не нужно игнорировать. Зачастую, у вас имеется группа файлов, которые вы не только не хотите автоматически добавлять в репозиторий, но и видеть в списках неотслеживаемых (а чем взрослее проект, тем больше таких файлов может быть). К таким файлам обычно относятся автоматически генерируемые файлы (различные логи, результаты сборки программ и т.п.).

Как я говорил в вводной лекции, в таком случае, вы можете создать файл .gitignore с перечислением шаблонов соответствующих таким файлам. Хорошая практика заключается в настройке файла .gitignore до того, как начать серьёзно работать, это защитит вас от случайного добавления в репозиторий файлов, которых вы там видеть не хотите.

Вот пример файла .gitignore для типового Rails приложения (пример взят с github и является стандартом де-факто для большинства репозиториев с проектами на Ruby on Rails):

$ cat .gitignore

*.rbc
capybara-*.html
.rspec
/log
/tmp
/db/*.sqlite3
/public/system
/coverage/
/spec/tmp
**.orig
rerun.txt
pickle-email-*.html

# TODO Comment out these rules if you are OK with secrets being uploaded to the repo
config/initializers/secret_token.rb
config/secrets.yml

## Environment normalisation:
/.bundle
/vendor/bundle

# these should all be checked in to normalise the environment:
# Gemfile.lock, .ruby-version, .ruby-gemset

# unless supporting rvm < 1.11.0 or doing something fancy, ignore this:
.rvmrc
Давайте повнимательнее рассмотрим этот файл: В первой строке написано, что необходимо игнорировать все файлы, которые заканчиваются на .rbc, в четвертой, что необходимо игнорировать директорию log, в шестой - все файлы конфигураций баз данных sqlite3. Сразу видно, что для большинства правил используются некоторые шаблоны. Но можно указывать и полный путь до конкретного файла, как сделано в 15 и 16 строках. Git всегда мягко применяет эти правила. Если вы указали, что необходимо игнорировать просто строку test - то он будет игнорировать и директории (вместе со вложенными файлами) и файлы, которые называются test, вне зависимости, где они располагаются. Если вы хотите ограничиться только корневым уровнем в репозитории - необходимо явно это указать поставив “/” перед шаблоном.

К шаблонам в файле .gitignore применяются следующие правила:

Пустые строки, а также строки, начинающиеся с #, игнорируются.
Можно использовать стандартные glob шаблоны.
Можно заканчивать шаблон символом слэша (/) для указания каталога.
Можно инвертировать шаблон, использовав восклицательный знак (!) в качестве первого символа.
Glob-шаблоны представляют собой упрощённые регулярные выражения используемые командными интерпретаторами. Символ * соответствует 0 или более символам; последовательность [abc] — любому символу из указанных в скобках (в данном примере a, b или c); знак вопроса (?) соответствует одному символу; [0-9] соответствует любому символу из интервала (в данном случае от 0 до 9). Вот ещё один пример файла .gitignore:

# комментарий — эта строка игнорируется
# не обрабатывать файлы, имя которых заканчивается на .a
*.a
# НО отслеживать файл lib.a, несмотря на то, что мы игнорируем все .a файлы с помощью предыдущего правила
!lib.a
# игнорировать только файл TODO находящийся в корневом каталоге, не относится к файлам вида subdir/TODO
/TODO
# игнорировать все файлы в каталоге build/
build/
# игнорировать doc/notes.txt, но не doc/server/arch.txt
doc/*.txt
# игнорировать все .txt файлы в каталоге doc/
doc/**/*.txt
Шаблон **/ доступен в Git, начиная с версии 1.8.2.

Временно игнорировать изменения в файле можно командой:

git update-index --assume-unchanged <file>
Отключается командой:

git update-index --no-assume-unchanged <file>
Если файл попал в индекс и нужно убрать его из индекса:

git rm --cached path/to/file
Однако, стоит быть осторожнее с командой git rm.

Однако, стоит обратить внимание на то, что файл .gitignore не решение от всех проблем. То есть он проблему то решает, но не стоит его всегда использовать. Иногда встречаю в файле .gitignore то, чего там быть никак не должно. Давайте представим такую ситуацию: Я и вы работаем в одной команде над одним проектом. Я в своей работе использую vim, а вы, например, IDE от JetBrains. У меня временные файлы создаются в специальном каталоге в профиле пользователя, тем самым в директории проекта я никак не создаю временных файлов при редактировании проекта. У вас же в проекте создается директория .idea, в которой лежат конфиги вашей IDE для этого проекта. Это часть вашего рабочего окружения и она никаким боком не относится к проекту и репозиторию. По идее, вы можете добавить строчку /.idea в файл .gitignore в проекте, однако, если над проектом работает несколько человек и каждый из них добавит конфиги своего окружения в .gitignore, то он превратится в нечитаемую помойку.

Что делать и как быть? Есть несколько разных способов игнорирования файлов в git.

Исключения для проекта
Этот как раз тот самый .gitignore, в корне репозитория. В него стоит помещать в основном только то, что имеет непосредсвенное оношение к проекту и его архитектуре. Например, у всех участников проекта есть директория с локами, или у всех в одном и том же месте создаются временные файлы. Если эти правила имеют отношение ко всем участникам проекта - то стоит правила игнорирования разместить в .gitignore, который будет распространяться вместе с репозиторием.

Исключение для компьютера
Когда у вас несколько проектов и везде создается что-либо, что вы не хотите коммитить(например, *.swp файлы Vim) используйте ~/.gitconfig. Вышеприведённый пример папки .idea, которая создается для каждого проекта как раз подходит сюда. Создайте файл .gitexcludes и выполните:

git config --global core.excludesfile ~/.gitexcludes
или вручную добавьте в ~/.gitconfig:

[core]
  excludesfile = ~/.gitexcludes
Исключение для репозитория
Иногда возможны случаи, когда у вас есть файлы, которые специфичны для данного проекта и для вашего рабочего окружения (например, логи third-party утилиты, которую вы любите использовать и используете только в этом проекте). К проекту отнести шаблон игнорирования - не верно. Вы не используете ее во всех проектах и значит игнорировать глобально на всем компьютере - тоже не стоит. В данном случае используйте .git/info/exclude. Этот файл не коммитится и остается только в локальном репозитории.

Сразу после сохранения ~/.gitconfig вы не должны видеть указанные файлы/папки в списке Untracked files.

Я люблю Git, но и он порой непоследователен в мелочах. Обращаю ваше внимание на то, что в первом случае мы редактируем файл.git/info/exclude (без s на конце), а во втором используем опцию excludeSfile (c s в середине). Не потеряйте время из-за возможной опечатки.

Работа с Git в большинстве случаев означает работу в команде, поэтому не усложняйте жизнь тем, кто будет работать с вами деталями вашего рабочего окружения. Хороших коммитов! :)

